
LCD_TASK1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006f2  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000721  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  0000072f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018d9  00000000  00000000  0000084f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000876  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a2c  00000000  00000000  0000299e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  000033cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000283  00000000  00000000  0000365c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000090f  00000000  00000000  000038df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000041ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000650  00000650  000006e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000042d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.BUTTON_init 00000018  000005ec  000005ec  00000680  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.BUTTON_on 00000026  00000520  00000520  000005b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.BUTTON_off 00000026  00000546  00000546  000005da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.BUTTON_Read_State 00000046  000004da  000004da  0000056e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.APPINIT 00000022  0000056c  0000056c  00000600  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.Counter_INCREASING 0000001c  000005d0  000005d0  00000664  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.Counter_DECREASING 00000020  000005b0  000005b0  00000644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000022  0000058e  0000058e  00000622  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.Counter  00000001  00800066  00800066  000006f2  2**0
                  ALLOC
 23 .text.DIO_voidSetPinDirection 0000010a  000000ae  000000ae  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.DIO_voidSetPinValue 0000010a  000001b8  000001b8  0000024c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.DIO_voidGetPinValue 000000dc  000002c2  000002c2  00000356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.EXTI_INIT 0000008c  0000039e  0000039e  00000432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.EXTI_ENABLE_GLOBALINT 00000008  00000648  00000648  000006dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.EXTI_CLR_FLAG 00000018  00000604  00000604  00000698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.EXTI_voidSetCallBack 00000016  0000061c  0000061c  000006b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_1 00000058  0000042a  0000042a  000004be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_2 00000058  00000482  00000482  00000516  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss.EXTI_CallBack 00000006  00800060  00800060  000006f2  2**0
                  ALLOC
 33 .text.__dummy_fini 00000002  00000658  00000658  000006ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_funcs_on_exit 00000002  0000065a  0000065a  000006ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_simulator_exit 00000002  0000065c  0000065c  000006f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.exit    00000016  00000632  00000632  000006c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text._Exit   00000004  00000654  00000654  000006e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_1>
   8:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_2>
   c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  10:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  14:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  18:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  1c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  20:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  24:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  28:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  2c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  30:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  34:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  38:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  3c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  40:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  44:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  48:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  4c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
  50:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 67       	ori	r16, 0x70	; 112
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 c7 02 	call	0x58e	; 0x58e <main>
  a6:	0c 94 19 03 	jmp	0x632	; 0x632 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000650 <__bad_interrupt>:
 650:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.BUTTON_init:

000005ec <BUTTON_init>:
#include "PUSH_BUTTON_config.h"
#include "PUSH_BUTTON_interface.h"
#include "PUSH_BUTTON_private.h"

B_errorstate BUTTON_init     (uint8_t BUTTON_pinnum, uint8_t BUTTON_port)
{
 5ec:	98 2f       	mov	r25, r24
 5ee:	86 2f       	mov	r24, r22
	if(DIO_voidSetPinDirection(BUTTON_port , BUTTON_pinnum, DIO_PIN_INTPUT ))
 5f0:	40 e0       	ldi	r20, 0x00	; 0
 5f2:	69 2f       	mov	r22, r25
 5f4:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 5f8:	88 23       	and	r24, r24
 5fa:	11 f0       	breq	.+4      	; 0x600 <BUTTON_init+0x14>
	{
		return B_OK;
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	08 95       	ret
	}
	else
	{
		return B_NOTOK;
 600:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 602:	08 95       	ret

Disassembly of section .text.BUTTON_on:

00000520 <BUTTON_on>:

B_errorstate BUTTON_on       (uint8_t BUTTON_pinnum, uint8_t BUTTON_port)
{
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	d8 2f       	mov	r29, r24
 526:	c6 2f       	mov	r28, r22
	BUTTON_init(BUTTON_pinnum,BUTTON_port);
 528:	0e 94 f6 02 	call	0x5ec	; 0x5ec <BUTTON_init>
	if(DIO_voidSetPinValue(BUTTON_port , BUTTON_pinnum , DIO_PINVAL_HIGH))  return B_OK;
 52c:	41 e0       	ldi	r20, 0x01	; 1
 52e:	6d 2f       	mov	r22, r29
 530:	8c 2f       	mov	r24, r28
 532:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DIO_voidSetPinValue>
 536:	88 23       	and	r24, r24
 538:	11 f0       	breq	.+4      	; 0x53e <BUTTON_on+0x1e>
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	01 c0       	rjmp	.+2      	; 0x540 <BUTTON_on+0x20>
	return B_NOTOK;
 53e:	81 e0       	ldi	r24, 0x01	; 1
}
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

Disassembly of section .text.BUTTON_off:

00000546 <BUTTON_off>:
B_errorstate BUTTON_off      (uint8_t BUTTON_pinnum, uint8_t BUTTON_port)
{
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	d8 2f       	mov	r29, r24
 54c:	c6 2f       	mov	r28, r22
	BUTTON_init(BUTTON_pinnum,BUTTON_port);
 54e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <BUTTON_init>
	if(DIO_voidSetPinValue(BUTTON_port , BUTTON_pinnum , DIO_PINVAL_LOW))  return B_OK;
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	6d 2f       	mov	r22, r29
 556:	8c 2f       	mov	r24, r28
 558:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DIO_voidSetPinValue>
 55c:	88 23       	and	r24, r24
 55e:	11 f0       	breq	.+4      	; 0x564 <BUTTON_off+0x1e>
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	01 c0       	rjmp	.+2      	; 0x566 <BUTTON_off+0x20>
	return B_NOTOK;
 564:	81 e0       	ldi	r24, 0x01	; 1
}
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

Disassembly of section .text.BUTTON_Read_State:

000004da <BUTTON_Read_State>:
	return B_OK;
	
}

B_STATE BUTTON_Read_State  (uint8_t BUTTON_pinnum, uint8_t BUTTON_port)
{
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	c8 2f       	mov	r28, r24
 4e0:	d6 2f       	mov	r29, r22
	uint8_t *pin_valueL = DIO_PINVAL_HIGH;
	uint8_t *pin_valueH = DIO_PINVAL_LOW;
	if(DIO_voidGetPinValue(BUTTON_port,BUTTON_pinnum , pin_valueL))
 4e2:	41 e0       	ldi	r20, 0x01	; 1
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	68 2f       	mov	r22, r24
 4e8:	8d 2f       	mov	r24, r29
 4ea:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIO_voidGetPinValue>
 4ee:	88 23       	and	r24, r24
 4f0:	31 f0       	breq	.+12     	; 0x4fe <BUTTON_Read_State+0x24>
	{
		BUTTON_on(BUTTON_pinnum , BUTTON_port);
 4f2:	6d 2f       	mov	r22, r29
 4f4:	8c 2f       	mov	r24, r28
 4f6:	0e 94 90 02 	call	0x520	; 0x520 <BUTTON_on>
		return B_ON;
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e c0       	rjmp	.+28     	; 0x51a <BUTTON_Read_State+0x40>
	}
	else if(DIO_voidGetPinValue(BUTTON_port,BUTTON_pinnum , pin_valueH))
 4fe:	40 e0       	ldi	r20, 0x00	; 0
 500:	50 e0       	ldi	r21, 0x00	; 0
 502:	6c 2f       	mov	r22, r28
 504:	8d 2f       	mov	r24, r29
 506:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIO_voidGetPinValue>
 50a:	88 23       	and	r24, r24
 50c:	31 f0       	breq	.+12     	; 0x51a <BUTTON_Read_State+0x40>
	{
		BUTTON_off(BUTTON_pinnum , BUTTON_port);
 50e:	6d 2f       	mov	r22, r29
 510:	8c 2f       	mov	r24, r28
 512:	0e 94 a3 02 	call	0x546	; 0x546 <BUTTON_off>
	return B_OFF;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	00 c0       	rjmp	.+0      	; 0x51a <BUTTON_Read_State+0x40>
	}
	
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

Disassembly of section .text.APPINIT:

0000056c <APPINIT>:

static uint8_t Counter = 0;
static void APPINIT(void)
{
   // CLCD_init_lcd ();
	EXTI_INIT (LINE0,RISING_EDGE);
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	86 e0       	ldi	r24, 0x06	; 6
 570:	0e 94 cf 01 	call	0x39e	; 0x39e <EXTI_INIT>
	EXTI_INIT (LINE1,RISING_EDGE);
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	87 e0       	ldi	r24, 0x07	; 7
 578:	0e 94 cf 01 	call	0x39e	; 0x39e <EXTI_INIT>
	BUTTON_init(DIO_PIN2,PORTD); //init BTN1
 57c:	62 b3       	in	r22, 0x12	; 18
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	0e 94 f6 02 	call	0x5ec	; 0x5ec <BUTTON_init>
	BUTTON_init(DIO_PIN3,PORTD); //init BTN2
 584:	62 b3       	in	r22, 0x12	; 18
 586:	83 e0       	ldi	r24, 0x03	; 3
 588:	0e 94 f6 02 	call	0x5ec	; 0x5ec <BUTTON_init>
 58c:	08 95       	ret

Disassembly of section .text.Counter_INCREASING:

000005d0 <Counter_INCREASING>:


void Counter_INCREASING(void)
{
	 
	uint8_t BTN2_STATE = BUTTON_Read_State(DIO_PIN3,PORTD);
 5d0:	62 b3       	in	r22, 0x12	; 18
 5d2:	83 e0       	ldi	r24, 0x03	; 3
 5d4:	0e 94 6d 02 	call	0x4da	; 0x4da <BUTTON_Read_State>
	
	if( BTN2_STATE == B_ON   && Counter <= 9)
 5d8:	81 11       	cpse	r24, r1
 5da:	07 c0       	rjmp	.+14     	; 0x5ea <Counter_INCREASING+0x1a>
 5dc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Counter>
 5e0:	8a 30       	cpi	r24, 0x0A	; 10
 5e2:	18 f4       	brcc	.+6      	; 0x5ea <Counter_INCREASING+0x1a>
	{
		Counter++;
 5e4:	8f 5f       	subi	r24, 0xFF	; 255
 5e6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Counter>
 5ea:	08 95       	ret

Disassembly of section .text.Counter_DECREASING:

000005b0 <Counter_DECREASING>:
}


void Counter_DECREASING (void)
{
	unsigned char BTN2_STATE = BUTTON_Read_State(DIO_PIN3,PORTD);
 5b0:	62 b3       	in	r22, 0x12	; 18
 5b2:	83 e0       	ldi	r24, 0x03	; 3
 5b4:	0e 94 6d 02 	call	0x4da	; 0x4da <BUTTON_Read_State>
	if( BTN2_STATE == B_OFF && ( Counter <= 9) && Counter > 0)
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	49 f4       	brne	.+18     	; 0x5ce <Counter_DECREASING+0x1e>
 5bc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Counter>
 5c0:	8a 30       	cpi	r24, 0x0A	; 10
 5c2:	28 f4       	brcc	.+10     	; 0x5ce <Counter_DECREASING+0x1e>
 5c4:	88 23       	and	r24, r24
 5c6:	19 f0       	breq	.+6      	; 0x5ce <Counter_DECREASING+0x1e>
	{
		
		Counter--;
 5c8:	81 50       	subi	r24, 0x01	; 1
 5ca:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Counter>
 5ce:	08 95       	ret

Disassembly of section .text.main:

0000058e <main>:
/************************************************************************/


int main(void)
{
	APPINIT();
 58e:	0e 94 b6 02 	call	0x56c	; 0x56c <APPINIT>
	EXTI_ENABLE_GLOBALINT();
 592:	0e 94 24 03 	call	0x648	; 0x648 <EXTI_ENABLE_GLOBALINT>
	EXTI_voidSetCallBack(Counter_INCREASING , LINE0);
 596:	66 e0       	ldi	r22, 0x06	; 6
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	88 ee       	ldi	r24, 0xE8	; 232
 59c:	92 e0       	ldi	r25, 0x02	; 2
 59e:	0e 94 0e 03 	call	0x61c	; 0x61c <EXTI_voidSetCallBack>
	EXTI_voidSetCallBack  (Counter_DECREASING , LINE1);
 5a2:	67 e0       	ldi	r22, 0x07	; 7
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	88 ed       	ldi	r24, 0xD8	; 216
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	0e 94 0e 03 	call	0x61c	; 0x61c <EXTI_voidSetCallBack>
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <main+0x20>

Disassembly of section .text.DIO_voidSetPinDirection:

000000ae <DIO_voidSetPinDirection>:
/*********PIN FUNCTIONS********************/

D_errorstate   DIO_voidSetPinDirection(uint8_t port ,uint8_t pinNum, uint8_t direction)
{
	D_errorstate local_state = DIO_OK;
	if( (port>3) || (pinNum>7) )
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	18 f4       	brcc	.+6      	; 0xb8 <DIO_voidSetPinDirection+0xa>
  b2:	68 30       	cpi	r22, 0x08	; 8
  b4:	08 f4       	brcc	.+2      	; 0xb8 <DIO_voidSetPinDirection+0xa>
  b6:	78 c0       	rjmp	.+240    	; 0x1a8 <DIO_voidSetPinDirection+0xfa>
	{
		
		if(direction == DIO_PIN_OUTPUT)                         //1- check if the direction the user entered is output or input
  b8:	41 30       	cpi	r20, 0x01	; 1
  ba:	c1 f5       	brne	.+112    	; 0x12c <DIO_voidSetPinDirection+0x7e>
		{                                                       // 2- if output then check what port and set the pin number (bit position)
			switch (port)
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	91 f0       	breq	.+36     	; 0xe4 <DIO_voidSetPinDirection+0x36>
  c0:	28 f0       	brcs	.+10     	; 0xcc <DIO_voidSetPinDirection+0x1e>
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	d9 f0       	breq	.+54     	; 0xfc <DIO_voidSetPinDirection+0x4e>
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	29 f1       	breq	.+74     	; 0x114 <DIO_voidSetPinDirection+0x66>
  ca:	70 c0       	rjmp	.+224    	; 0x1ac <DIO_voidSetPinDirection+0xfe>
			{
				case DIO_PORTA: set_bit(DDRA,pinNum); break;
  cc:	2a b3       	in	r18, 0x1a	; 26
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_voidSetPinDirection+0x2a>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_voidSetPinDirection+0x26>
  dc:	82 2b       	or	r24, r18
  de:	8a bb       	out	0x1a, r24	; 26

/*********PIN FUNCTIONS********************/

D_errorstate   DIO_voidSetPinDirection(uint8_t port ,uint8_t pinNum, uint8_t direction)
{
	D_errorstate local_state = DIO_OK;
  e0:	80 e0       	ldi	r24, 0x00	; 0
		
		if(direction == DIO_PIN_OUTPUT)                         //1- check if the direction the user entered is output or input
		{                                                       // 2- if output then check what port and set the pin number (bit position)
			switch (port)
			{
				case DIO_PORTA: set_bit(DDRA,pinNum); break;
  e2:	08 95       	ret
				case DIO_PORTB: set_bit(DDRB,pinNum); break;
  e4:	27 b3       	in	r18, 0x17	; 23
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_voidSetPinDirection+0x42>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_voidSetPinDirection+0x3e>
  f4:	82 2b       	or	r24, r18
  f6:	87 bb       	out	0x17, r24	; 23

/*********PIN FUNCTIONS********************/

D_errorstate   DIO_voidSetPinDirection(uint8_t port ,uint8_t pinNum, uint8_t direction)
{
	D_errorstate local_state = DIO_OK;
  f8:	80 e0       	ldi	r24, 0x00	; 0
		if(direction == DIO_PIN_OUTPUT)                         //1- check if the direction the user entered is output or input
		{                                                       // 2- if output then check what port and set the pin number (bit position)
			switch (port)
			{
				case DIO_PORTA: set_bit(DDRA,pinNum); break;
				case DIO_PORTB: set_bit(DDRB,pinNum); break;
  fa:	08 95       	ret
				case DIO_PORTC: set_bit(DDRC,pinNum); break;
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_voidSetPinDirection+0x5a>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_voidSetPinDirection+0x56>
 10c:	82 2b       	or	r24, r18
 10e:	84 bb       	out	0x14, r24	; 20

/*********PIN FUNCTIONS********************/

D_errorstate   DIO_voidSetPinDirection(uint8_t port ,uint8_t pinNum, uint8_t direction)
{
	D_errorstate local_state = DIO_OK;
 110:	80 e0       	ldi	r24, 0x00	; 0
		{                                                       // 2- if output then check what port and set the pin number (bit position)
			switch (port)
			{
				case DIO_PORTA: set_bit(DDRA,pinNum); break;
				case DIO_PORTB: set_bit(DDRB,pinNum); break;
				case DIO_PORTC: set_bit(DDRC,pinNum); break;
 112:	08 95       	ret
				case DIO_PORTD: set_bit(DDRD,pinNum); break;
 114:	21 b3       	in	r18, 0x11	; 17
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_voidSetPinDirection+0x72>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_voidSetPinDirection+0x6e>
 124:	82 2b       	or	r24, r18
 126:	81 bb       	out	0x11, r24	; 17

/*********PIN FUNCTIONS********************/

D_errorstate   DIO_voidSetPinDirection(uint8_t port ,uint8_t pinNum, uint8_t direction)
{
	D_errorstate local_state = DIO_OK;
 128:	80 e0       	ldi	r24, 0x00	; 0
			switch (port)
			{
				case DIO_PORTA: set_bit(DDRA,pinNum); break;
				case DIO_PORTB: set_bit(DDRB,pinNum); break;
				case DIO_PORTC: set_bit(DDRC,pinNum); break;
				case DIO_PORTD: set_bit(DDRD,pinNum); break;
 12a:	08 95       	ret
			}
			
		}
		else if(direction == DIO_PIN_INTPUT)
 12c:	41 11       	cpse	r20, r1
 12e:	40 c0       	rjmp	.+128    	; 0x1b0 <DIO_voidSetPinDirection+0x102>
		{
			switch (port)
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	99 f0       	breq	.+38     	; 0x15a <DIO_voidSetPinDirection+0xac>
 134:	28 f0       	brcs	.+10     	; 0x140 <DIO_voidSetPinDirection+0x92>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	e9 f0       	breq	.+58     	; 0x174 <DIO_voidSetPinDirection+0xc6>
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	41 f1       	breq	.+80     	; 0x18e <DIO_voidSetPinDirection+0xe0>
 13e:	3a c0       	rjmp	.+116    	; 0x1b4 <DIO_voidSetPinDirection+0x106>
			{
				case DIO_PORTA: clear_bit(DDRA,pinNum); break;
 140:	2a b3       	in	r18, 0x1a	; 26
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_voidSetPinDirection+0x9e>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_voidSetPinDirection+0x9a>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	8a bb       	out	0x1a, r24	; 26

/*********PIN FUNCTIONS********************/

D_errorstate   DIO_voidSetPinDirection(uint8_t port ,uint8_t pinNum, uint8_t direction)
{
	D_errorstate local_state = DIO_OK;
 156:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(direction == DIO_PIN_INTPUT)
		{
			switch (port)
			{
				case DIO_PORTA: clear_bit(DDRA,pinNum); break;
 158:	08 95       	ret
				case DIO_PORTB: clear_bit(DDRB,pinNum); break;
 15a:	27 b3       	in	r18, 0x17	; 23
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_voidSetPinDirection+0xb8>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_voidSetPinDirection+0xb4>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	87 bb       	out	0x17, r24	; 23

/*********PIN FUNCTIONS********************/

D_errorstate   DIO_voidSetPinDirection(uint8_t port ,uint8_t pinNum, uint8_t direction)
{
	D_errorstate local_state = DIO_OK;
 170:	80 e0       	ldi	r24, 0x00	; 0
		else if(direction == DIO_PIN_INTPUT)
		{
			switch (port)
			{
				case DIO_PORTA: clear_bit(DDRA,pinNum); break;
				case DIO_PORTB: clear_bit(DDRB,pinNum); break;
 172:	08 95       	ret
				case DIO_PORTC: clear_bit(DDRC,pinNum); break;
 174:	24 b3       	in	r18, 0x14	; 20
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_voidSetPinDirection+0xd2>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_voidSetPinDirection+0xce>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	84 bb       	out	0x14, r24	; 20

/*********PIN FUNCTIONS********************/

D_errorstate   DIO_voidSetPinDirection(uint8_t port ,uint8_t pinNum, uint8_t direction)
{
	D_errorstate local_state = DIO_OK;
 18a:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (port)
			{
				case DIO_PORTA: clear_bit(DDRA,pinNum); break;
				case DIO_PORTB: clear_bit(DDRB,pinNum); break;
				case DIO_PORTC: clear_bit(DDRC,pinNum); break;
 18c:	08 95       	ret
				case DIO_PORTD: clear_bit(DDRD,pinNum); break;
 18e:	21 b3       	in	r18, 0x11	; 17
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_voidSetPinDirection+0xec>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_voidSetPinDirection+0xe8>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	81 bb       	out	0x11, r24	; 17

/*********PIN FUNCTIONS********************/

D_errorstate   DIO_voidSetPinDirection(uint8_t port ,uint8_t pinNum, uint8_t direction)
{
	D_errorstate local_state = DIO_OK;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
			switch (port)
			{
				case DIO_PORTA: clear_bit(DDRA,pinNum); break;
				case DIO_PORTB: clear_bit(DDRB,pinNum); break;
				case DIO_PORTC: clear_bit(DDRC,pinNum); break;
				case DIO_PORTD: clear_bit(DDRD,pinNum); break;
 1a6:	08 95       	ret
		}
		
	}
	else
	{
		local_state= DIO_NOTOK;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	08 95       	ret

/*********PIN FUNCTIONS********************/

D_errorstate   DIO_voidSetPinDirection(uint8_t port ,uint8_t pinNum, uint8_t direction)
{
	D_errorstate local_state = DIO_OK;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret
				case DIO_PORTD: clear_bit(DDRD,pinNum); break;
			}
		}
		else
		{
			local_state= DIO_NOTOK;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	08 95       	ret

/*********PIN FUNCTIONS********************/

D_errorstate   DIO_voidSetPinDirection(uint8_t port ,uint8_t pinNum, uint8_t direction)
{
	D_errorstate local_state = DIO_OK;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
	{
		local_state= DIO_NOTOK;
	}
	
	return local_state;
}
 1b6:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

000001b8 <DIO_voidSetPinValue>:

D_errorstate   DIO_voidSetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t value    ) //output DDRA=1
{
	D_errorstate local_state = DIO_OK;
	
	if((port>3) || (pinNum>7))
 1b8:	84 30       	cpi	r24, 0x04	; 4
 1ba:	18 f4       	brcc	.+6      	; 0x1c2 <DIO_voidSetPinValue+0xa>
 1bc:	68 30       	cpi	r22, 0x08	; 8
 1be:	08 f4       	brcc	.+2      	; 0x1c2 <DIO_voidSetPinValue+0xa>
 1c0:	78 c0       	rjmp	.+240    	; 0x2b2 <DIO_voidSetPinValue+0xfa>
	{
		
		if(value == DIO_PINVAL_HIGH)
 1c2:	41 30       	cpi	r20, 0x01	; 1
 1c4:	c1 f5       	brne	.+112    	; 0x236 <DIO_voidSetPinValue+0x7e>
		{
			switch(port)
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	91 f0       	breq	.+36     	; 0x1ee <DIO_voidSetPinValue+0x36>
 1ca:	28 f0       	brcs	.+10     	; 0x1d6 <DIO_voidSetPinValue+0x1e>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	d9 f0       	breq	.+54     	; 0x206 <DIO_voidSetPinValue+0x4e>
 1d0:	83 30       	cpi	r24, 0x03	; 3
 1d2:	29 f1       	breq	.+74     	; 0x21e <DIO_voidSetPinValue+0x66>
 1d4:	70 c0       	rjmp	.+224    	; 0x2b6 <DIO_voidSetPinValue+0xfe>
			{
				
				case DIO_PORTA: set_bit(PORTA,pinNum); break;
 1d6:	2b b3       	in	r18, 0x1b	; 27
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_voidSetPinValue+0x2a>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_voidSetPinValue+0x26>
 1e6:	82 2b       	or	r24, r18
 1e8:	8b bb       	out	0x1b, r24	; 27
	return local_state;
}

D_errorstate   DIO_voidSetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t value    ) //output DDRA=1
{
	D_errorstate local_state = DIO_OK;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
		if(value == DIO_PINVAL_HIGH)
		{
			switch(port)
			{
				
				case DIO_PORTA: set_bit(PORTA,pinNum); break;
 1ec:	08 95       	ret
				case DIO_PORTB: set_bit(PORTB,pinNum); break;
 1ee:	28 b3       	in	r18, 0x18	; 24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_voidSetPinValue+0x42>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_voidSetPinValue+0x3e>
 1fe:	82 2b       	or	r24, r18
 200:	88 bb       	out	0x18, r24	; 24
	return local_state;
}

D_errorstate   DIO_voidSetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t value    ) //output DDRA=1
{
	D_errorstate local_state = DIO_OK;
 202:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(port)
			{
				
				case DIO_PORTA: set_bit(PORTA,pinNum); break;
				case DIO_PORTB: set_bit(PORTB,pinNum); break;
 204:	08 95       	ret
				case DIO_PORTC: set_bit(PORTC,pinNum); break;
 206:	25 b3       	in	r18, 0x15	; 21
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_voidSetPinValue+0x5a>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_voidSetPinValue+0x56>
 216:	82 2b       	or	r24, r18
 218:	85 bb       	out	0x15, r24	; 21
	return local_state;
}

D_errorstate   DIO_voidSetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t value    ) //output DDRA=1
{
	D_errorstate local_state = DIO_OK;
 21a:	80 e0       	ldi	r24, 0x00	; 0
			switch(port)
			{
				
				case DIO_PORTA: set_bit(PORTA,pinNum); break;
				case DIO_PORTB: set_bit(PORTB,pinNum); break;
				case DIO_PORTC: set_bit(PORTC,pinNum); break;
 21c:	08 95       	ret
				case DIO_PORTD: set_bit(PORTD,pinNum); break;
 21e:	22 b3       	in	r18, 0x12	; 18
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_voidSetPinValue+0x72>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_voidSetPinValue+0x6e>
 22e:	82 2b       	or	r24, r18
 230:	82 bb       	out	0x12, r24	; 18
	return local_state;
}

D_errorstate   DIO_voidSetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t value    ) //output DDRA=1
{
	D_errorstate local_state = DIO_OK;
 232:	80 e0       	ldi	r24, 0x00	; 0
			{
				
				case DIO_PORTA: set_bit(PORTA,pinNum); break;
				case DIO_PORTB: set_bit(PORTB,pinNum); break;
				case DIO_PORTC: set_bit(PORTC,pinNum); break;
				case DIO_PORTD: set_bit(PORTD,pinNum); break;
 234:	08 95       	ret
			}
		}
		else if(value == DIO_PIN_INTPUT)
 236:	41 11       	cpse	r20, r1
 238:	40 c0       	rjmp	.+128    	; 0x2ba <DIO_voidSetPinValue+0x102>
		{
			switch (port)
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	99 f0       	breq	.+38     	; 0x264 <DIO_voidSetPinValue+0xac>
 23e:	28 f0       	brcs	.+10     	; 0x24a <DIO_voidSetPinValue+0x92>
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	e9 f0       	breq	.+58     	; 0x27e <DIO_voidSetPinValue+0xc6>
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	41 f1       	breq	.+80     	; 0x298 <DIO_voidSetPinValue+0xe0>
 248:	3a c0       	rjmp	.+116    	; 0x2be <DIO_voidSetPinValue+0x106>
			{
				case DIO_PORTA: clear_bit(PORTA,pinNum); break;
 24a:	2b b3       	in	r18, 0x1b	; 27
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_voidSetPinValue+0x9e>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_voidSetPinValue+0x9a>
 25a:	80 95       	com	r24
 25c:	82 23       	and	r24, r18
 25e:	8b bb       	out	0x1b, r24	; 27
	return local_state;
}

D_errorstate   DIO_voidSetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t value    ) //output DDRA=1
{
	D_errorstate local_state = DIO_OK;
 260:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(value == DIO_PIN_INTPUT)
		{
			switch (port)
			{
				case DIO_PORTA: clear_bit(PORTA,pinNum); break;
 262:	08 95       	ret
				case DIO_PORTB: clear_bit(PORTB,pinNum); break;
 264:	28 b3       	in	r18, 0x18	; 24
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_voidSetPinValue+0xb8>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_voidSetPinValue+0xb4>
 274:	80 95       	com	r24
 276:	82 23       	and	r24, r18
 278:	88 bb       	out	0x18, r24	; 24
	return local_state;
}

D_errorstate   DIO_voidSetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t value    ) //output DDRA=1
{
	D_errorstate local_state = DIO_OK;
 27a:	80 e0       	ldi	r24, 0x00	; 0
		else if(value == DIO_PIN_INTPUT)
		{
			switch (port)
			{
				case DIO_PORTA: clear_bit(PORTA,pinNum); break;
				case DIO_PORTB: clear_bit(PORTB,pinNum); break;
 27c:	08 95       	ret
				case DIO_PORTC: clear_bit(PORTC,pinNum); break;
 27e:	25 b3       	in	r18, 0x15	; 21
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_voidSetPinValue+0xd2>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_voidSetPinValue+0xce>
 28e:	80 95       	com	r24
 290:	82 23       	and	r24, r18
 292:	85 bb       	out	0x15, r24	; 21
	return local_state;
}

D_errorstate   DIO_voidSetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t value    ) //output DDRA=1
{
	D_errorstate local_state = DIO_OK;
 294:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (port)
			{
				case DIO_PORTA: clear_bit(PORTA,pinNum); break;
				case DIO_PORTB: clear_bit(PORTB,pinNum); break;
				case DIO_PORTC: clear_bit(PORTC,pinNum); break;
 296:	08 95       	ret
				case DIO_PORTD: clear_bit(PORTD,pinNum); break;
 298:	22 b3       	in	r18, 0x12	; 18
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_voidSetPinValue+0xec>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_voidSetPinValue+0xe8>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	82 bb       	out	0x12, r24	; 18
	return local_state;
}

D_errorstate   DIO_voidSetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t value    ) //output DDRA=1
{
	D_errorstate local_state = DIO_OK;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
			switch (port)
			{
				case DIO_PORTA: clear_bit(PORTA,pinNum); break;
				case DIO_PORTB: clear_bit(PORTB,pinNum); break;
				case DIO_PORTC: clear_bit(PORTC,pinNum); break;
				case DIO_PORTD: clear_bit(PORTD,pinNum); break;
 2b0:	08 95       	ret
			local_state = DIO_NOTOK;
		}
	}
	else
	{
		local_state = DIO_NOTOK;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	08 95       	ret
	return local_state;
}

D_errorstate   DIO_voidSetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t value    ) //output DDRA=1
{
	D_errorstate local_state = DIO_OK;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret
				case DIO_PORTD: clear_bit(PORTD,pinNum); break;
			}
		}
		else
		{
			local_state = DIO_NOTOK;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	08 95       	ret
	return local_state;
}

D_errorstate   DIO_voidSetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t value    ) //output DDRA=1
{
	D_errorstate local_state = DIO_OK;
 2be:	80 e0       	ldi	r24, 0x00	; 0
	{
		local_state = DIO_NOTOK;
	}
	
	return local_state;
}
 2c0:	08 95       	ret

Disassembly of section .text.DIO_voidGetPinValue:

000002c2 <DIO_voidGetPinValue>:

D_errorstate DIO_voidGetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t *PtrDta    )
{
	D_errorstate RETURN_VAL= DIO_OK;
	if((port>3) || (pinNum>7))
 2c2:	84 30       	cpi	r24, 0x04	; 4
 2c4:	18 f4       	brcc	.+6      	; 0x2cc <DIO_voidGetPinValue+0xa>
 2c6:	68 30       	cpi	r22, 0x08	; 8
 2c8:	08 f4       	brcc	.+2      	; 0x2cc <DIO_voidGetPinValue+0xa>
 2ca:	65 c0       	rjmp	.+202    	; 0x396 <DIO_voidGetPinValue+0xd4>
	{
		
		switch (port)
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	f1 f0       	breq	.+60     	; 0x30c <DIO_voidGetPinValue+0x4a>
 2d0:	30 f0       	brcs	.+12     	; 0x2de <DIO_voidGetPinValue+0x1c>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	91 f1       	breq	.+100    	; 0x33a <DIO_voidGetPinValue+0x78>
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_voidGetPinValue+0x1a>
 2da:	46 c0       	rjmp	.+140    	; 0x368 <DIO_voidGetPinValue+0xa6>
 2dc:	5e c0       	rjmp	.+188    	; 0x39a <DIO_voidGetPinValue+0xd8>
		{
			case DIO_PORTA: *PtrDta= GET_BIT(PINA,pinNum); break;
 2de:	79 b3       	in	r23, 0x19	; 25
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	9c 01       	movw	r18, r24
 2e6:	06 2e       	mov	r0, r22
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_voidGetPinValue+0x2c>
 2ea:	22 0f       	add	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_voidGetPinValue+0x28>
 2f2:	87 2f       	mov	r24, r23
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	82 23       	and	r24, r18
 2f8:	93 23       	and	r25, r19
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_voidGetPinValue+0x3e>
 2fc:	95 95       	asr	r25
 2fe:	87 95       	ror	r24
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_voidGetPinValue+0x3a>
 304:	fa 01       	movw	r30, r20
 306:	80 83       	st	Z, r24
	return local_state;
}

D_errorstate DIO_voidGetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t *PtrDta    )
{
	D_errorstate RETURN_VAL= DIO_OK;
 308:	80 e0       	ldi	r24, 0x00	; 0
	if((port>3) || (pinNum>7))
	{
		
		switch (port)
		{
			case DIO_PORTA: *PtrDta= GET_BIT(PINA,pinNum); break;
 30a:	08 95       	ret
			case DIO_PORTB: *PtrDta= GET_BIT(PINB,pinNum); break;
 30c:	76 b3       	in	r23, 0x16	; 22
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	9c 01       	movw	r18, r24
 314:	06 2e       	mov	r0, r22
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_voidGetPinValue+0x5a>
 318:	22 0f       	add	r18, r18
 31a:	33 1f       	adc	r19, r19
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_voidGetPinValue+0x56>
 320:	87 2f       	mov	r24, r23
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	82 23       	and	r24, r18
 326:	93 23       	and	r25, r19
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_voidGetPinValue+0x6c>
 32a:	95 95       	asr	r25
 32c:	87 95       	ror	r24
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_voidGetPinValue+0x68>
 332:	fa 01       	movw	r30, r20
 334:	80 83       	st	Z, r24
	return local_state;
}

D_errorstate DIO_voidGetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t *PtrDta    )
{
	D_errorstate RETURN_VAL= DIO_OK;
 336:	80 e0       	ldi	r24, 0x00	; 0
	{
		
		switch (port)
		{
			case DIO_PORTA: *PtrDta= GET_BIT(PINA,pinNum); break;
			case DIO_PORTB: *PtrDta= GET_BIT(PINB,pinNum); break;
 338:	08 95       	ret
			case DIO_PORTC: *PtrDta= GET_BIT(PINC,pinNum); break;
 33a:	73 b3       	in	r23, 0x13	; 19
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	9c 01       	movw	r18, r24
 342:	06 2e       	mov	r0, r22
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_voidGetPinValue+0x88>
 346:	22 0f       	add	r18, r18
 348:	33 1f       	adc	r19, r19
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_voidGetPinValue+0x84>
 34e:	87 2f       	mov	r24, r23
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	82 23       	and	r24, r18
 354:	93 23       	and	r25, r19
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_voidGetPinValue+0x9a>
 358:	95 95       	asr	r25
 35a:	87 95       	ror	r24
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_voidGetPinValue+0x96>
 360:	fa 01       	movw	r30, r20
 362:	80 83       	st	Z, r24
	return local_state;
}

D_errorstate DIO_voidGetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t *PtrDta    )
{
	D_errorstate RETURN_VAL= DIO_OK;
 364:	80 e0       	ldi	r24, 0x00	; 0
		
		switch (port)
		{
			case DIO_PORTA: *PtrDta= GET_BIT(PINA,pinNum); break;
			case DIO_PORTB: *PtrDta= GET_BIT(PINB,pinNum); break;
			case DIO_PORTC: *PtrDta= GET_BIT(PINC,pinNum); break;
 366:	08 95       	ret
			case DIO_PORTD: *PtrDta= GET_BIT(PIND,pinNum); break;
 368:	70 b3       	in	r23, 0x10	; 16
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	9c 01       	movw	r18, r24
 370:	06 2e       	mov	r0, r22
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_voidGetPinValue+0xb6>
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_voidGetPinValue+0xb2>
 37c:	87 2f       	mov	r24, r23
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	82 23       	and	r24, r18
 382:	93 23       	and	r25, r19
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_voidGetPinValue+0xc8>
 386:	95 95       	asr	r25
 388:	87 95       	ror	r24
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_voidGetPinValue+0xc4>
 38e:	fa 01       	movw	r30, r20
 390:	80 83       	st	Z, r24
	return local_state;
}

D_errorstate DIO_voidGetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t *PtrDta    )
{
	D_errorstate RETURN_VAL= DIO_OK;
 392:	80 e0       	ldi	r24, 0x00	; 0
		switch (port)
		{
			case DIO_PORTA: *PtrDta= GET_BIT(PINA,pinNum); break;
			case DIO_PORTB: *PtrDta= GET_BIT(PINB,pinNum); break;
			case DIO_PORTC: *PtrDta= GET_BIT(PINC,pinNum); break;
			case DIO_PORTD: *PtrDta= GET_BIT(PIND,pinNum); break;
 394:	08 95       	ret
		}
	}
	else
	{
		RETURN_VAL = DIO_NOTOK;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	08 95       	ret
	return local_state;
}

D_errorstate DIO_voidGetPinValue    (uint8_t port ,uint8_t pinNum, uint8_t *PtrDta    )
{
	D_errorstate RETURN_VAL= DIO_OK;
 39a:	80 e0       	ldi	r24, 0x00	; 0
	{
		RETURN_VAL = DIO_NOTOK;
	}
	return RETURN_VAL;
	
}
 39c:	08 95       	ret

Disassembly of section .text.EXTI_INIT:

0000039e <EXTI_INIT>:
	
}

void EXTI_DISABLE_CONTORLINT (EXT_LINE IntLine                       )
{
	clear_bit(EXT_GICR , IntLine);
 39e:	86 30       	cpi	r24, 0x06	; 6
 3a0:	19 f0       	breq	.+6      	; 0x3a8 <EXTI_INIT+0xa>
 3a2:	87 30       	cpi	r24, 0x07	; 7
 3a4:	09 f1       	breq	.+66     	; 0x3e8 <EXTI_INIT+0x4a>
 3a6:	08 95       	ret
 3a8:	61 30       	cpi	r22, 0x01	; 1
 3aa:	31 f0       	breq	.+12     	; 0x3b8 <EXTI_INIT+0x1a>
 3ac:	58 f0       	brcs	.+22     	; 0x3c4 <EXTI_INIT+0x26>
 3ae:	62 30       	cpi	r22, 0x02	; 2
 3b0:	79 f0       	breq	.+30     	; 0x3d0 <EXTI_INIT+0x32>
 3b2:	63 30       	cpi	r22, 0x03	; 3
 3b4:	99 f0       	breq	.+38     	; 0x3dc <EXTI_INIT+0x3e>
 3b6:	18 c0       	rjmp	.+48     	; 0x3e8 <EXTI_INIT+0x4a>
 3b8:	85 b7       	in	r24, 0x35	; 53
 3ba:	82 60       	ori	r24, 0x02	; 2
 3bc:	85 bf       	out	0x35, r24	; 53
 3be:	85 b7       	in	r24, 0x35	; 53
 3c0:	8e 7f       	andi	r24, 0xFE	; 254
 3c2:	85 bf       	out	0x35, r24	; 53
 3c4:	85 b7       	in	r24, 0x35	; 53
 3c6:	82 60       	ori	r24, 0x02	; 2
 3c8:	85 bf       	out	0x35, r24	; 53
 3ca:	85 b7       	in	r24, 0x35	; 53
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	85 bf       	out	0x35, r24	; 53
 3d0:	85 b7       	in	r24, 0x35	; 53
 3d2:	8e 7f       	andi	r24, 0xFE	; 254
 3d4:	85 bf       	out	0x35, r24	; 53
 3d6:	85 b7       	in	r24, 0x35	; 53
 3d8:	8e 7f       	andi	r24, 0xFE	; 254
 3da:	85 bf       	out	0x35, r24	; 53
 3dc:	85 b7       	in	r24, 0x35	; 53
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	85 bf       	out	0x35, r24	; 53
 3e2:	85 b7       	in	r24, 0x35	; 53
 3e4:	8d 7f       	andi	r24, 0xFD	; 253
 3e6:	85 bf       	out	0x35, r24	; 53
 3e8:	61 30       	cpi	r22, 0x01	; 1
 3ea:	31 f0       	breq	.+12     	; 0x3f8 <EXTI_INIT+0x5a>
 3ec:	58 f0       	brcs	.+22     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ee:	62 30       	cpi	r22, 0x02	; 2
 3f0:	79 f0       	breq	.+30     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3f2:	63 30       	cpi	r22, 0x03	; 3
 3f4:	99 f0       	breq	.+38     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3f6:	08 95       	ret
 3f8:	85 b7       	in	r24, 0x35	; 53
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	85 bf       	out	0x35, r24	; 53
 3fe:	85 b7       	in	r24, 0x35	; 53
 400:	8b 7f       	andi	r24, 0xFB	; 251
 402:	85 bf       	out	0x35, r24	; 53
 404:	85 b7       	in	r24, 0x35	; 53
 406:	88 60       	ori	r24, 0x08	; 8
 408:	85 bf       	out	0x35, r24	; 53
 40a:	85 b7       	in	r24, 0x35	; 53
 40c:	84 60       	ori	r24, 0x04	; 4
 40e:	85 bf       	out	0x35, r24	; 53
 410:	85 b7       	in	r24, 0x35	; 53
 412:	87 7f       	andi	r24, 0xF7	; 247
 414:	85 bf       	out	0x35, r24	; 53
 416:	85 b7       	in	r24, 0x35	; 53
 418:	8b 7f       	andi	r24, 0xFB	; 251
 41a:	85 bf       	out	0x35, r24	; 53
 41c:	85 b7       	in	r24, 0x35	; 53
 41e:	84 60       	ori	r24, 0x04	; 4
 420:	85 bf       	out	0x35, r24	; 53
 422:	85 b7       	in	r24, 0x35	; 53
 424:	87 7f       	andi	r24, 0xF7	; 247
 426:	85 bf       	out	0x35, r24	; 53
 428:	08 95       	ret

Disassembly of section .text.EXTI_ENABLE_GLOBALINT:

00000648 <EXTI_ENABLE_GLOBALINT>:
}

void EXTI_ENABLE_GLOBALINT   (void                                   )
{
	
	set_bit(SREG ,SREG_BIT_I);
 648:	8f b7       	in	r24, 0x3f	; 63
 64a:	80 68       	ori	r24, 0x80	; 128
 64c:	8f bf       	out	0x3f, r24	; 63
 64e:	08 95       	ret

Disassembly of section .text.EXTI_CLR_FLAG:

00000604 <EXTI_CLR_FLAG>:
	clear_bit(EXT_GICR , IntLine);
}

void EXTI_CLR_FLAG           (EXT_LINE IntLine                       )
{
	clear_bit(EXTI_GIFR , IntLine);
 604:	9a b7       	in	r25, 0x3a	; 58
 606:	21 e0       	ldi	r18, 0x01	; 1
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <EXTI_CLR_FLAG+0xc>
 60c:	22 0f       	add	r18, r18
 60e:	33 1f       	adc	r19, r19
 610:	8a 95       	dec	r24
 612:	e2 f7       	brpl	.-8      	; 0x60c <EXTI_CLR_FLAG+0x8>
 614:	20 95       	com	r18
 616:	29 23       	and	r18, r25
 618:	2a bf       	out	0x3a, r18	; 58
 61a:	08 95       	ret

Disassembly of section .text.EXTI_voidSetCallBack:

0000061c <EXTI_voidSetCallBack>:
}

/*************************************************************************************/
void EXTI_voidSetCallBack( void (*Copy_pvoidCallBack)(void) , uint8_t Copy_u8EXTILine ){

	if( Copy_pvoidCallBack != NULL ){
 61c:	00 97       	sbiw	r24, 0x00	; 0
 61e:	41 f0       	breq	.+16     	; 0x630 <EXTI_voidSetCallBack+0x14>

		EXTI_CallBack[Copy_u8EXTILine] = Copy_pvoidCallBack ;
 620:	e6 2f       	mov	r30, r22
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	ee 0f       	add	r30, r30
 626:	ff 1f       	adc	r31, r31
 628:	e0 5a       	subi	r30, 0xA0	; 160
 62a:	ff 4f       	sbci	r31, 0xFF	; 255
 62c:	91 83       	std	Z+1, r25	; 0x01
 62e:	80 83       	st	Z, r24
 630:	08 95       	ret

Disassembly of section .text.__vector_1:

0000042a <__vector_1>:
	
}

void EXTI_DISABLE_CONTORLINT (EXT_LINE IntLine                       )
{
	clear_bit(EXT_GICR , IntLine);
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	6f 93       	push	r22
 43e:	7f 93       	push	r23
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
 44c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 450:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 454:	30 97       	sbiw	r30, 0x00	; 0
 456:	21 f0       	breq	.+8      	; 0x460 <__vector_1+0x36>
 458:	09 95       	icall
 45a:	86 e0       	ldi	r24, 0x06	; 6
 45c:	0e 94 02 03 	call	0x604	; 0x604 <EXTI_CLR_FLAG>
 460:	ff 91       	pop	r31
 462:	ef 91       	pop	r30
 464:	bf 91       	pop	r27
 466:	af 91       	pop	r26
 468:	9f 91       	pop	r25
 46a:	8f 91       	pop	r24
 46c:	7f 91       	pop	r23
 46e:	6f 91       	pop	r22
 470:	5f 91       	pop	r21
 472:	4f 91       	pop	r20
 474:	3f 91       	pop	r19
 476:	2f 91       	pop	r18
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

Disassembly of section .text.__vector_2:

00000482 <__vector_2>:
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	11 24       	eor	r1, r1
 48c:	2f 93       	push	r18
 48e:	3f 93       	push	r19
 490:	4f 93       	push	r20
 492:	5f 93       	push	r21
 494:	6f 93       	push	r22
 496:	7f 93       	push	r23
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	af 93       	push	r26
 49e:	bf 93       	push	r27
 4a0:	ef 93       	push	r30
 4a2:	ff 93       	push	r31
 4a4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 4a8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 4ac:	30 97       	sbiw	r30, 0x00	; 0
 4ae:	21 f0       	breq	.+8      	; 0x4b8 <__vector_2+0x36>
 4b0:	09 95       	icall
 4b2:	87 e0       	ldi	r24, 0x07	; 7
 4b4:	0e 94 02 03 	call	0x604	; 0x604 <EXTI_CLR_FLAG>
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	bf 91       	pop	r27
 4be:	af 91       	pop	r26
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	7f 91       	pop	r23
 4c6:	6f 91       	pop	r22
 4c8:	5f 91       	pop	r21
 4ca:	4f 91       	pop	r20
 4cc:	3f 91       	pop	r19
 4ce:	2f 91       	pop	r18
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	0f 90       	pop	r0
 4d6:	1f 90       	pop	r1
 4d8:	18 95       	reti

Disassembly of section .text.__dummy_fini:

00000658 <_fini>:
 658:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000065a <__funcs_on_exit>:
 65a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000065c <__simulator_exit>:
 65c:	08 95       	ret

Disassembly of section .text.exit:

00000632 <exit>:
 632:	ec 01       	movw	r28, r24
 634:	0e 94 2d 03 	call	0x65a	; 0x65a <__funcs_on_exit>
 638:	0e 94 2c 03 	call	0x658	; 0x658 <_fini>
 63c:	ce 01       	movw	r24, r28
 63e:	0e 94 2e 03 	call	0x65c	; 0x65c <__simulator_exit>
 642:	ce 01       	movw	r24, r28
 644:	0e 94 2a 03 	call	0x654	; 0x654 <_Exit>

Disassembly of section .text._Exit:

00000654 <_Exit>:
 654:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
